# -*- coding: utf-8 -*-
"""kidney_classifier

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13xQfdlNoSAV8tUr5cn-3KXTEC0fnOzGk
"""

# Kidney Classification using Teachable Machine - Google Colab
# ===========================================================

import tensorflow as tf
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from google.colab import files

# Fix for DepthwiseConv2D compatibility issue
class FixedDepthwiseConv2D(tf.keras.layers.DepthwiseConv2D):
    def __init__(self, *args, **kwargs):
        kwargs.pop('groups', None)
        super().__init__(*args, **kwargs)

# Custom objects for model loading
custom_objects = {
    'DepthwiseConv2D': FixedDepthwiseConv2D,
    'relu6': tf.nn.relu6,
    'hard_sigmoid': tf.keras.activations.hard_sigmoid
}

# Class labels
classes = ["Normal", "Kidney Cyst", "Kidney Stone", "Kidney Tumor"]

def load_model_safe(model_path):
    """Load Teachable Machine model with compatibility fixes"""
    try:
        return tf.keras.models.load_model(model_path, custom_objects=custom_objects, compile=False)
    except:
        return tf.keras.models.load_model(model_path, compile=False, safe_mode=False)

def classify_image(model, image_path):
    """Classify kidney ultrasound image"""
    # Preprocess image
    img = Image.open(image_path).convert('RGB').resize((224, 224))
    img_array = np.array(img, dtype=np.float32) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Predict
    predictions = model.predict(img_array, verbose=0)
    if isinstance(predictions, list):
        predictions = predictions[0]
    if len(predictions.shape) > 1:
        predictions = predictions[0]

    result_idx = np.argmax(predictions)
    confidence = float(predictions[result_idx])
    predicted_class = classes[result_idx]

    # Display results
    plt.figure(figsize=(12, 5))

    plt.subplot(1, 2, 1)
    plt.imshow(img)
    plt.title(f"Input: {image_path}")
    plt.axis('off')

    plt.subplot(1, 2, 2)
    colors = ['red' if i == result_idx else 'lightblue' for i in range(len(classes))]
    bars = plt.bar(classes, predictions, color=colors)
    plt.title(f"Result: {predicted_class} ({confidence:.1%})")
    plt.xticks(rotation=45, ha='right')
    plt.ylabel('Confidence')

    for bar, prob in zip(bars, predictions):
        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
                f'{prob:.1%}', ha='center', va='bottom')

    plt.tight_layout()
    plt.show()

    print(f"Prediction: {predicted_class} ({confidence:.1%})")
    return predicted_class, confidence

# Main execution
print("Upload your Teachable Machine model (.h5 file):")
model_files = files.upload()

if model_files:
    model_name = list(model_files.keys())[0]
    model = load_model_safe(model_name)

    print("\nUpload kidney ultrasound images:")
    image_files = files.upload()

    for image_name in image_files.keys():
        if image_name.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
            classify_image(model, image_name)